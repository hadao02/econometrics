library(stats)
library(dplyr)
library(ggplot2)
library(tidyr)
library(gdata)
library(readxl)
library(purrr)
library(tidyverse)
library(estimatr)
library(texreg)
library(sandwich)
library(haven)
library(magrittr)
library(corrplot)
library(ggcorrplot)
library(tseries)
library(plm)
library(lmtest)
df <- read.csv("D:/Personal project/IMDB/econometrics/index_merged_data.csv")
print(str(df))
if (!is.numeric(df$GDPGrowthRate)) {
df$GDPGrowthRate <- as.numeric(df$GDPGrowthRate)
}
######################## box plot ########################
RANKS <- c('PropertyRights', 'JudicialEffectiveness', 'GovernmentIntegrity', 'TaxBurden',
'GovSpending', 'FiscalHealth', 'BusinessFreedom',
'LaborFreedom', 'MonetaryFreedom', 'TradeFreedom',
'InvestmentFreedom', 'FinancialFreedom')
classifier <- function(item) {
if (is.na(item) || !is.numeric(item)) {
return('gray')
} else if (item > 80) {
return('darkgreen')
} else if (item > 70) {
return('limegreen')
} else if (item > 60) {
return('yellow')
} else if (item > 50) {
return('orange')
} else {
return('red')
}
}
# function for making boxplots
boxPlots <- function(df) {
boxplot(df, col = sapply(apply(df, 2, median), classifier), main = "World Scores by Category", xlab = "", ylab = "Score", las = 2)
}
# calls function
boxPlots(df[RANKS])
######################## box plot ########################
PERCENTAGE_STATS <- c('TariffRate', 'IncomeTaxRate', 'CorporateTaxRate',
'TaxBurdenRateOfGDP', 'GovExpenditureRateOfGDP', 'GDPGrowthRate', 'UnemploymentRate', 'InflationRate')
classifier <- function(item) {
if (is.na(item) || !is.numeric(item)) {
return('gray')
} else if (item < 0) {
return('darkgreen')
} else if (item > 30) {
return('limegreen')
} else if (item > 20) {
return('yellow')
} else if (item > 10) {
return('orange')
} else {
return('red')
}
}
# function for making boxplots
boxPlots <- function(df) {
boxplot(df, col = sapply(apply(df, 2, median), classifier), main = "World Scores by Category", xlab = "", ylab = "Score", las = 2, ylim=c(-30,110))
}
par(mar=c(13, 4, 4, 2))
# calls function
boxPlots(df[PERCENTAGE_STATS])
######################## scatter plot ########################
scatterPlot <- function(X, Y, predictions=NULL) {
p <- ggplot() +
geom_point(aes(x=X, y=Y)) +
ggtitle(paste(colnames(X), "vs", colnames(Y))) +
xlab(colnames(X)) +
ylab(colnames(Y))
if(!is.null(predictions)) {
p <- p + geom_line(aes(x=X, y=predictions), color="black")
}
print(p)
}
X_total <- df[["TaxBurden"]]
Y <- df[["GDPGrowthRate"]]
scatterPlot(X_total, Y)
######################## correlation matrix ########################
library(GGally)
library(reshape2)
RANKS_AND_RATE_original <- c('PropertyRights', 'JudicialEffectiveness', 'GovernmentIntegrity', 'TaxBurden',
'GovSpending', 'FiscalHealth', 'BusinessFreedom',
'LaborFreedom', 'MonetaryFreedom', 'TradeFreedom',
'InvestmentFreedom', 'FinancialFreedom', 'TariffRate',
'IncomeTaxRate', 'CorporateTaxRate',  'UnemploymentRate', 'InflationRate')
correlationMatrix <- function(merged_df) {
# Compute correlation matrix
corr <- cor(merged_df)
# Melt
melted_corr <- reshape2::melt(corr)
# Plot
ggplot(data = melted_corr, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Correlation Matrix")
}
# Call the function with the desired columns
correlationMatrix(df[, c(RANKS_AND_RATE_original, "GDPGrowthRate")])
correlation <- cor(df$GDPGrowthRate, select(df, -c(GDPGrowthRate, year, CountryName, Region, CountryID, X5YearGDPGrowthRate )))
print(correlation)
scatterPlot <- function(X, Y, predictions=NULL) {
p <- ggplot() +
geom_point(aes(x=X, y=Y)) +
ggtitle(paste(colnames(X), "vs", colnames(Y))) +
xlab(colnames(X)) +
ylab(colnames(Y))
if(!is.null(predictions)) {
p <- p + geom_line(aes(x=X, y=predictions), color="black")
}
print(p)
}
X_total <- df[["TaxBurden"]]
Y <- df[["GDPGrowthRate"]]
scatterPlot(X_total, Y)
